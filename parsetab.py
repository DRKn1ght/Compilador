
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startBOOL COMMA DIVIDE ELSE EQUALS FALSE FLOAT FOR ID IF INT LBRACK LPAREN MINUS NEWLINE NUM PLUS RBRACK RETURN RPAREN STR STRING TIMES TRUE WHILEexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMfactor : LPAREN expression RPARENexpression : STRINGexpression : TRUE\n                  | FALSEstart : expression\n             | declarationtype_specifier : INT\n                      | FLOAT\n                      | STR\n                      | BOOLdeclaration : type_specifier ID expression_opt NEWLINEexpression_opt : EQUALS expression\n                      | emptyempty :'
    
_lr_action_items = {'STRING':([0,15,27,],[5,5,5,]),'TRUE':([0,15,27,],[6,6,6,]),'FALSE':([0,15,27,],[7,7,7,]),'INT':([0,],[10,]),'FLOAT':([0,],[11,]),'STR':([0,],[12,]),'BOOL':([0,],[13,]),'NUM':([0,15,16,17,18,19,27,],[14,14,14,14,14,14,14,]),'LPAREN':([0,15,16,17,18,19,27,],[15,15,15,15,15,15,15,]),'$end':([1,2,3,4,5,6,7,9,14,22,23,24,25,29,30,],[0,-12,-13,-3,-9,-10,-11,-6,-7,-1,-2,-4,-5,-8,-18,]),'PLUS':([2,4,5,6,7,9,14,21,22,23,24,25,29,31,],[16,-3,-9,-10,-11,-6,-7,16,-1,-2,-4,-5,-8,16,]),'MINUS':([2,4,5,6,7,9,14,21,22,23,24,25,29,31,],[17,-3,-9,-10,-11,-6,-7,17,-1,-2,-4,-5,-8,17,]),'RPAREN':([4,5,6,7,9,14,21,22,23,24,25,29,],[-3,-9,-10,-11,-6,-7,29,-1,-2,-4,-5,-8,]),'NEWLINE':([4,5,6,7,9,14,20,22,23,24,25,26,28,29,31,],[-3,-9,-10,-11,-6,-7,-21,-1,-2,-4,-5,30,-20,-8,-19,]),'TIMES':([4,9,14,22,23,24,25,29,],[18,-6,-7,18,18,-4,-5,-8,]),'DIVIDE':([4,9,14,22,23,24,25,29,],[19,-6,-7,19,19,-4,-5,-8,]),'ID':([8,10,11,12,13,],[20,-14,-15,-16,-17,]),'EQUALS':([20,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'expression':([0,15,27,],[2,21,31,]),'declaration':([0,],[3,]),'term':([0,15,16,17,27,],[4,4,22,23,4,]),'type_specifier':([0,],[8,]),'factor':([0,15,16,17,18,19,27,],[9,9,9,9,24,25,9,]),'expression_opt':([20,],[26,]),'empty':([20,],[28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','sintatico.py',79),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','sintatico.py',83),
  ('expression -> term','expression',1,'p_expression_term','sintatico.py',87),
  ('term -> term TIMES factor','term',3,'p_term_times','sintatico.py',91),
  ('term -> term DIVIDE factor','term',3,'p_term_div','sintatico.py',95),
  ('term -> factor','term',1,'p_term_factor','sintatico.py',99),
  ('factor -> NUM','factor',1,'p_factor_num','sintatico.py',103),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','sintatico.py',107),
  ('expression -> STRING','expression',1,'p_expression_string','sintatico.py',112),
  ('expression -> TRUE','expression',1,'p_expression_boolean','sintatico.py',116),
  ('expression -> FALSE','expression',1,'p_expression_boolean','sintatico.py',117),
  ('start -> expression','start',1,'p_start','sintatico.py',122),
  ('start -> declaration','start',1,'p_start','sintatico.py',123),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','sintatico.py',128),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','sintatico.py',129),
  ('type_specifier -> STR','type_specifier',1,'p_type_specifier','sintatico.py',130),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','sintatico.py',131),
  ('declaration -> type_specifier ID expression_opt NEWLINE','declaration',4,'p_declaration','sintatico.py',136),
  ('expression_opt -> EQUALS expression','expression_opt',2,'p_expression_opt','sintatico.py',146),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','sintatico.py',147),
  ('empty -> <empty>','empty',0,'p_empty','sintatico.py',154),
]
