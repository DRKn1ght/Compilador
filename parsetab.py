
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL COMMA DIVIDE DOUBLE_EQUALS EQUALS FALSE FLOAT GREATER_THAN GREATER_THAN_OR_EQUALS ID IF INT LBRACE LESS_THAN LESS_THAN_OR_EQUALS LPAREN MINUS NEWLINE NOT_EQUALS NUM PLUS PRINT RBRACE RETURN RPAREN SEMICOLON STR STRING TIMES TRUE WHILEprogram : declaration\n                   | function_declaration\n                     expression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMfactor : IDfactor : LPAREN expression RPARENexpression : STRINGexpression : TRUE\n                    | FALSEprint_statement : PRINT LPAREN expression RPAREN SEMICOLONstatement : expression\n                    | if_statement\n                    | while_statement\n                    | declaration\n                    | print_statement\n                    | return_statementcomparison : DOUBLE_EQUALS\n                    | NOT_EQUALS\n                    | LESS_THAN\n                    | LESS_THAN_OR_EQUALS\n                    | GREATER_THAN\n                    | GREATER_THAN_OR_EQUALS\n            condition : expression comparison expression\n                    | expression\n        if_statement : IF LPAREN condition RPAREN LBRACE declaration_list RBRACEwhile_statement : WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACEtype : INT\n                | FLOAT\n                | STR\n                | BOOLdeclaration : type ID expression_opt SEMICOLONexpression_opt : EQUALS expression\n                        | emptyempty :function_declaration : type ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE \n        parameter_list : parameter_list COMMA parameter\n                    | parameter\n                    | empty\n        \n        parameter : type ID\n        return_statement : RETURN expression SEMICOLONdeclaration_list : declaration_list statement\n                            | statement\n                            | empty'
    
_lr_action_items = {'INT':([0,11,14,20,21,22,23,24,25,26,30,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[5,5,-36,-5,-12,-13,-14,-8,-9,-10,5,5,-3,-4,-6,-7,-11,5,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,5,5,-15,5,5,-30,-31,]),'FLOAT':([0,11,14,20,21,22,23,24,25,26,30,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[6,6,-36,-5,-12,-13,-14,-8,-9,-10,6,6,-3,-4,-6,-7,-11,6,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,6,6,-15,6,6,-30,-31,]),'STR':([0,11,14,20,21,22,23,24,25,26,30,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[7,7,-36,-5,-12,-13,-14,-8,-9,-10,7,7,-3,-4,-6,-7,-11,7,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,7,7,-15,7,7,-30,-31,]),'BOOL':([0,11,14,20,21,22,23,24,25,26,30,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[8,8,-36,-5,-12,-13,-14,-8,-9,-10,8,8,-3,-4,-6,-7,-11,8,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,8,8,-15,8,8,-30,-31,]),'$end':([1,2,3,14,58,],[0,-1,-2,-36,-40,]),'ID':([4,5,6,7,8,12,14,15,20,21,22,23,24,25,26,27,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,56,59,60,61,62,68,70,71,72,73,74,75,76,79,81,82,83,84,85,86,],[9,-32,-33,-34,-35,26,-36,28,-5,-12,-13,-14,-8,-9,-10,26,26,26,26,26,26,-3,-4,-6,-7,-11,57,26,-47,-48,-16,-17,-18,-19,-20,-21,26,-46,26,26,26,-45,26,-22,-23,-24,-25,-26,-27,26,26,-15,26,26,-30,-31,]),'LPAREN':([9,12,14,20,21,22,23,24,25,26,27,31,32,33,34,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,68,70,71,72,73,74,75,76,79,81,82,83,84,85,86,],[11,27,-36,-5,-12,-13,-14,-8,-9,-10,27,27,27,27,27,27,-3,-4,-6,-7,-11,27,-47,-48,-16,-17,-18,-19,-20,-21,60,61,62,27,-46,27,27,27,-45,27,-22,-23,-24,-25,-26,-27,27,27,-15,27,27,-30,-31,]),'EQUALS':([9,57,],[12,12,]),'SEMICOLON':([9,10,13,19,20,21,22,23,24,25,26,38,39,40,41,42,57,63,78,],[-39,14,-38,-37,-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,-39,68,82,]),'RPAREN':([11,16,17,18,20,21,22,23,24,25,26,28,35,37,38,39,40,41,42,64,65,66,67,80,],[-39,29,-42,-43,-5,-12,-13,-14,-8,-9,-10,-44,42,-41,-3,-4,-6,-7,-11,69,-29,77,78,-28,]),'COMMA':([11,16,17,18,28,37,],[-39,30,-42,-43,-44,-41,]),'STRING':([12,14,20,21,22,23,24,25,26,27,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,56,59,60,61,62,68,70,71,72,73,74,75,76,79,81,82,83,84,85,86,],[21,-36,-5,-12,-13,-14,-8,-9,-10,21,21,-3,-4,-6,-7,-11,21,-47,-48,-16,-17,-18,-19,-20,-21,21,-46,21,21,21,-45,21,-22,-23,-24,-25,-26,-27,21,21,-15,21,21,-30,-31,]),'TRUE':([12,14,20,21,22,23,24,25,26,27,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,56,59,60,61,62,68,70,71,72,73,74,75,76,79,81,82,83,84,85,86,],[22,-36,-5,-12,-13,-14,-8,-9,-10,22,22,-3,-4,-6,-7,-11,22,-47,-48,-16,-17,-18,-19,-20,-21,22,-46,22,22,22,-45,22,-22,-23,-24,-25,-26,-27,22,22,-15,22,22,-30,-31,]),'FALSE':([12,14,20,21,22,23,24,25,26,27,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,56,59,60,61,62,68,70,71,72,73,74,75,76,79,81,82,83,84,85,86,],[23,-36,-5,-12,-13,-14,-8,-9,-10,23,23,-3,-4,-6,-7,-11,23,-47,-48,-16,-17,-18,-19,-20,-21,23,-46,23,23,23,-45,23,-22,-23,-24,-25,-26,-27,23,23,-15,23,23,-30,-31,]),'NUM':([12,14,20,21,22,23,24,25,26,27,31,32,33,34,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,56,59,60,61,62,68,70,71,72,73,74,75,76,79,81,82,83,84,85,86,],[25,-36,-5,-12,-13,-14,-8,-9,-10,25,25,25,25,25,25,-3,-4,-6,-7,-11,25,-47,-48,-16,-17,-18,-19,-20,-21,25,-46,25,25,25,-45,25,-22,-23,-24,-25,-26,-27,25,25,-15,25,25,-30,-31,]),'RBRACE':([14,20,21,22,23,24,25,26,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[-36,-5,-12,-13,-14,-8,-9,-10,-39,-3,-4,-6,-7,-11,58,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,-39,-39,-15,85,86,-30,-31,]),'IF':([14,20,21,22,23,24,25,26,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[-36,-5,-12,-13,-14,-8,-9,-10,53,-3,-4,-6,-7,-11,53,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,53,53,-15,53,53,-30,-31,]),'WHILE':([14,20,21,22,23,24,25,26,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[-36,-5,-12,-13,-14,-8,-9,-10,54,-3,-4,-6,-7,-11,54,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,54,54,-15,54,54,-30,-31,]),'PRINT':([14,20,21,22,23,24,25,26,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[-36,-5,-12,-13,-14,-8,-9,-10,55,-3,-4,-6,-7,-11,55,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,55,55,-15,55,55,-30,-31,]),'RETURN':([14,20,21,22,23,24,25,26,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,59,68,79,81,82,83,84,85,86,],[-36,-5,-12,-13,-14,-8,-9,-10,56,-3,-4,-6,-7,-11,56,-47,-48,-16,-17,-18,-19,-20,-21,-46,-45,56,56,-15,56,56,-30,-31,]),'PLUS':([19,20,21,22,23,24,25,26,35,38,39,40,41,42,47,63,65,67,80,],[31,-5,-12,-13,-14,-8,-9,-10,31,-3,-4,-6,-7,-11,31,31,31,31,31,]),'MINUS':([19,20,21,22,23,24,25,26,35,38,39,40,41,42,47,63,65,67,80,],[32,-5,-12,-13,-14,-8,-9,-10,32,-3,-4,-6,-7,-11,32,32,32,32,32,]),'DOUBLE_EQUALS':([20,21,22,23,24,25,26,38,39,40,41,42,65,],[-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,71,]),'NOT_EQUALS':([20,21,22,23,24,25,26,38,39,40,41,42,65,],[-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,72,]),'LESS_THAN':([20,21,22,23,24,25,26,38,39,40,41,42,65,],[-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,73,]),'LESS_THAN_OR_EQUALS':([20,21,22,23,24,25,26,38,39,40,41,42,65,],[-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,74,]),'GREATER_THAN':([20,21,22,23,24,25,26,38,39,40,41,42,65,],[-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,75,]),'GREATER_THAN_OR_EQUALS':([20,21,22,23,24,25,26,38,39,40,41,42,65,],[-5,-12,-13,-14,-8,-9,-10,-3,-4,-6,-7,-11,76,]),'TIMES':([20,24,25,26,38,39,40,41,42,],[33,-8,-9,-10,33,33,-6,-7,-11,]),'DIVIDE':([20,24,25,26,38,39,40,41,42,],[34,-8,-9,-10,34,34,-6,-7,-11,]),'LBRACE':([29,69,77,],[36,79,81,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([0,36,44,79,81,83,84,],[2,50,50,50,50,50,50,]),'function_declaration':([0,],[3,]),'type':([0,11,30,36,44,79,81,83,84,],[4,15,15,43,43,43,43,43,43,]),'expression_opt':([9,57,],[10,10,]),'empty':([9,11,36,57,79,81,],[13,18,46,13,46,46,]),'parameter_list':([11,],[16,]),'parameter':([11,30,],[17,37,]),'expression':([12,27,36,44,56,60,61,62,70,79,81,83,84,],[19,35,47,47,63,65,65,67,80,47,47,47,47,]),'term':([12,27,31,32,36,44,56,60,61,62,70,79,81,83,84,],[20,20,38,39,20,20,20,20,20,20,20,20,20,20,20,]),'factor':([12,27,31,32,33,34,36,44,56,60,61,62,70,79,81,83,84,],[24,24,24,24,40,41,24,24,24,24,24,24,24,24,24,24,24,]),'declaration_list':([36,79,81,],[44,83,84,]),'statement':([36,44,79,81,83,84,],[45,59,45,45,59,59,]),'if_statement':([36,44,79,81,83,84,],[48,48,48,48,48,48,]),'while_statement':([36,44,79,81,83,84,],[49,49,49,49,49,49,]),'print_statement':([36,44,79,81,83,84,],[51,51,51,51,51,51,]),'return_statement':([36,44,79,81,83,84,],[52,52,52,52,52,52,]),'condition':([60,61,],[64,66,]),'comparison':([65,],[70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration','program',1,'p_program','parsers.py',16),
  ('program -> function_declaration','program',1,'p_program','parsers.py',17),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parsers.py',23),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parsers.py',27),
  ('expression -> term','expression',1,'p_expression_term','parsers.py',31),
  ('term -> term TIMES factor','term',3,'p_term_times','parsers.py',35),
  ('term -> term DIVIDE factor','term',3,'p_term_div','parsers.py',39),
  ('term -> factor','term',1,'p_term_factor','parsers.py',43),
  ('factor -> NUM','factor',1,'p_factor_num','parsers.py',47),
  ('factor -> ID','factor',1,'p_factor_id','parsers.py',51),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','parsers.py',55),
  ('expression -> STRING','expression',1,'p_expression_string','parsers.py',60),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parsers.py',64),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parsers.py',65),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parsers.py',69),
  ('statement -> expression','statement',1,'p_statement','parsers.py',73),
  ('statement -> if_statement','statement',1,'p_statement','parsers.py',74),
  ('statement -> while_statement','statement',1,'p_statement','parsers.py',75),
  ('statement -> declaration','statement',1,'p_statement','parsers.py',76),
  ('statement -> print_statement','statement',1,'p_statement','parsers.py',77),
  ('statement -> return_statement','statement',1,'p_statement','parsers.py',78),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','parsers.py',82),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','parsers.py',83),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','parsers.py',84),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','parsers.py',85),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','parsers.py',86),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','parsers.py',87),
  ('condition -> expression comparison expression','condition',3,'p_condition','parsers.py',92),
  ('condition -> expression','condition',1,'p_condition','parsers.py',93),
  ('if_statement -> IF LPAREN condition RPAREN LBRACE declaration_list RBRACE','if_statement',7,'p_if_statement','parsers.py',101),
  ('while_statement -> WHILE LPAREN condition RPAREN LBRACE declaration_list RBRACE','while_statement',7,'p_while_statement','parsers.py',105),
  ('type -> INT','type',1,'p_type_specifier','parsers.py',110),
  ('type -> FLOAT','type',1,'p_type_specifier','parsers.py',111),
  ('type -> STR','type',1,'p_type_specifier','parsers.py',112),
  ('type -> BOOL','type',1,'p_type_specifier','parsers.py',113),
  ('declaration -> type ID expression_opt SEMICOLON','declaration',4,'p_declaration','parsers.py',118),
  ('expression_opt -> EQUALS expression','expression_opt',2,'p_expression_opt','parsers.py',128),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parsers.py',129),
  ('empty -> <empty>','empty',0,'p_empty','parsers.py',136),
  ('function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list RBRACE','function_declaration',8,'p_function_declaration','parsers.py',140),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parsers.py',146),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parsers.py',147),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parsers.py',148),
  ('parameter -> type ID','parameter',2,'p_parameter','parsers.py',158),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parsers.py',163),
  ('declaration_list -> declaration_list statement','declaration_list',2,'p_declaration_list','parsers.py',167),
  ('declaration_list -> statement','declaration_list',1,'p_declaration_list','parsers.py',168),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list','parsers.py',169),
]
