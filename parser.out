Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE
    THEN
    WHILE

Grammar

Rule 0     S' -> start
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     term -> term TIMES factor
Rule 5     term -> term DIVIDE factor
Rule 6     term -> factor
Rule 7     factor -> NUM
Rule 8     factor -> ID
Rule 9     factor -> LPAREN expression RPAREN
Rule 10    expression -> STRING
Rule 11    expression -> TRUE
Rule 12    expression -> FALSE
Rule 13    comparison -> DOUBLE_EQUALS
Rule 14    comparison -> NOT_EQUALS
Rule 15    comparison -> LESS_THAN
Rule 16    comparison -> LESS_THAN_OR_EQUALS
Rule 17    comparison -> GREATER_THAN
Rule 18    comparison -> GREATER_THAN_OR_EQUALS
Rule 19    condition -> expression comparison expression
Rule 20    condition -> expression
Rule 21    expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE
Rule 22    start -> expression
Rule 23    start -> declaration
Rule 24    start -> function_declaration
Rule 25    start -> return_statement
Rule 26    start -> condition
Rule 27    type -> INT
Rule 28    type -> FLOAT
Rule 29    type -> STR
Rule 30    type -> BOOL
Rule 31    declaration -> type ID expression_opt
Rule 32    expression_opt -> EQUALS expression
Rule 33    expression_opt -> empty
Rule 34    empty -> <empty>
Rule 35    function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
Rule 36    parameter_list -> parameter_list COMMA parameter
Rule 37    parameter_list -> parameter
Rule 38    parameter_list -> empty
Rule 39    parameter -> type ID
Rule 40    return_statement -> RETURN expression
Rule 41    declaration_list -> declaration_list NEWLINE declaration
Rule 42    declaration_list -> declaration
Rule 43    declaration_list -> empty

Terminals, with rules where they appear

BOOL                 : 30
COMMA                : 36
DIVIDE               : 5
DOUBLE_EQUALS        : 13
ELSE                 : 
EQUALS               : 32
FALSE                : 12
FLOAT                : 28
GREATER_THAN         : 17
GREATER_THAN_OR_EQUALS : 18
ID                   : 8 31 35 39
IF                   : 21
INT                  : 27
LBRACE               : 21 35
LESS_THAN            : 15
LESS_THAN_OR_EQUALS  : 16
LPAREN               : 9 21 35
MINUS                : 2
NEWLINE              : 35 35 41
NOT_EQUALS           : 14
NUM                  : 7
PLUS                 : 1
RBRACE               : 21 35
RETURN               : 40
RPAREN               : 9 21 35
STR                  : 29
STRING               : 10
THEN                 : 
TIMES                : 4
TRUE                 : 11
WHILE                : 
error                : 

Nonterminals, with rules where they appear

comparison           : 19
condition            : 21 26
declaration          : 23 41 42
declaration_list     : 35 41
empty                : 33 38 43
expression           : 1 2 9 19 19 20 21 22 32 40
expression_opt       : 31
factor               : 4 5 6
function_declaration : 24
parameter            : 36 37
parameter_list       : 35 36
return_statement     : 25 35
start                : 0
term                 : 1 2 3 4 5
type                 : 31 35 39

Parsing method: LALR

state 0

    (0) S' -> . start
    (22) start -> . expression
    (23) start -> . declaration
    (24) start -> . function_declaration
    (25) start -> . return_statement
    (26) start -> . condition
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (31) declaration -> . type ID expression_opt
    (35) function_declaration -> . type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (40) return_statement -> . RETURN expression
    (19) condition -> . expression comparison expression
    (20) condition -> . expression
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . STR
    (30) type -> . BOOL
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    RETURN          shift and go to state 15
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STR             shift and go to state 19
    BOOL            shift and go to state 20
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    start                          shift and go to state 1
    expression                     shift and go to state 2
    declaration                    shift and go to state 3
    function_declaration           shift and go to state 4
    return_statement               shift and go to state 5
    condition                      shift and go to state 6
    term                           shift and go to state 7
    type                           shift and go to state 13
    factor                         shift and go to state 16

state 1

    (0) S' -> start .



state 2

    (22) start -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (19) condition -> expression . comparison expression
    (20) condition -> expression .
    (13) comparison -> . DOUBLE_EQUALS
    (14) comparison -> . NOT_EQUALS
    (15) comparison -> . LESS_THAN
    (16) comparison -> . LESS_THAN_OR_EQUALS
    (17) comparison -> . GREATER_THAN
    (18) comparison -> . GREATER_THAN_OR_EQUALS

  ! reduce/reduce conflict for $end resolved using rule 20 (condition -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    $end            reduce using rule 20 (condition -> expression .)
    DOUBLE_EQUALS   shift and go to state 25
    NOT_EQUALS      shift and go to state 26
    LESS_THAN       shift and go to state 27
    LESS_THAN_OR_EQUALS shift and go to state 28
    GREATER_THAN    shift and go to state 29
    GREATER_THAN_OR_EQUALS shift and go to state 30

  ! $end            [ reduce using rule 22 (start -> expression .) ]

    comparison                     shift and go to state 24

state 3

    (23) start -> declaration .

    $end            reduce using rule 23 (start -> declaration .)


state 4

    (24) start -> function_declaration .

    $end            reduce using rule 24 (start -> function_declaration .)


state 5

    (25) start -> return_statement .

    $end            reduce using rule 25 (start -> return_statement .)


state 6

    (26) start -> condition .

    $end            reduce using rule 26 (start -> condition .)


state 7

    (3) expression -> term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    DOUBLE_EQUALS   reduce using rule 3 (expression -> term .)
    NOT_EQUALS      reduce using rule 3 (expression -> term .)
    LESS_THAN       reduce using rule 3 (expression -> term .)
    LESS_THAN_OR_EQUALS reduce using rule 3 (expression -> term .)
    GREATER_THAN    reduce using rule 3 (expression -> term .)
    GREATER_THAN_OR_EQUALS reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    NEWLINE         reduce using rule 3 (expression -> term .)
    RBRACE          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 8

    (10) expression -> STRING .

    PLUS            reduce using rule 10 (expression -> STRING .)
    MINUS           reduce using rule 10 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 10 (expression -> STRING .)
    NOT_EQUALS      reduce using rule 10 (expression -> STRING .)
    LESS_THAN       reduce using rule 10 (expression -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 10 (expression -> STRING .)
    GREATER_THAN    reduce using rule 10 (expression -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 10 (expression -> STRING .)
    $end            reduce using rule 10 (expression -> STRING .)
    RPAREN          reduce using rule 10 (expression -> STRING .)
    NEWLINE         reduce using rule 10 (expression -> STRING .)
    RBRACE          reduce using rule 10 (expression -> STRING .)


state 9

    (11) expression -> TRUE .

    PLUS            reduce using rule 11 (expression -> TRUE .)
    MINUS           reduce using rule 11 (expression -> TRUE .)
    DOUBLE_EQUALS   reduce using rule 11 (expression -> TRUE .)
    NOT_EQUALS      reduce using rule 11 (expression -> TRUE .)
    LESS_THAN       reduce using rule 11 (expression -> TRUE .)
    LESS_THAN_OR_EQUALS reduce using rule 11 (expression -> TRUE .)
    GREATER_THAN    reduce using rule 11 (expression -> TRUE .)
    GREATER_THAN_OR_EQUALS reduce using rule 11 (expression -> TRUE .)
    $end            reduce using rule 11 (expression -> TRUE .)
    RPAREN          reduce using rule 11 (expression -> TRUE .)
    NEWLINE         reduce using rule 11 (expression -> TRUE .)
    RBRACE          reduce using rule 11 (expression -> TRUE .)


state 10

    (12) expression -> FALSE .

    PLUS            reduce using rule 12 (expression -> FALSE .)
    MINUS           reduce using rule 12 (expression -> FALSE .)
    DOUBLE_EQUALS   reduce using rule 12 (expression -> FALSE .)
    NOT_EQUALS      reduce using rule 12 (expression -> FALSE .)
    LESS_THAN       reduce using rule 12 (expression -> FALSE .)
    LESS_THAN_OR_EQUALS reduce using rule 12 (expression -> FALSE .)
    GREATER_THAN    reduce using rule 12 (expression -> FALSE .)
    GREATER_THAN_OR_EQUALS reduce using rule 12 (expression -> FALSE .)
    $end            reduce using rule 12 (expression -> FALSE .)
    RPAREN          reduce using rule 12 (expression -> FALSE .)
    NEWLINE         reduce using rule 12 (expression -> FALSE .)
    RBRACE          reduce using rule 12 (expression -> FALSE .)


state 11

    (21) expression -> IF . LPAREN condition RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 33


state 12

    (9) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    expression                     shift and go to state 34
    term                           shift and go to state 7
    factor                         shift and go to state 16

state 13

    (31) declaration -> type . ID expression_opt
    (35) function_declaration -> type . ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE

    ID              shift and go to state 35


state 14

    (8) factor -> ID .

    TIMES           reduce using rule 8 (factor -> ID .)
    DIVIDE          reduce using rule 8 (factor -> ID .)
    PLUS            reduce using rule 8 (factor -> ID .)
    MINUS           reduce using rule 8 (factor -> ID .)
    DOUBLE_EQUALS   reduce using rule 8 (factor -> ID .)
    NOT_EQUALS      reduce using rule 8 (factor -> ID .)
    LESS_THAN       reduce using rule 8 (factor -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 8 (factor -> ID .)
    GREATER_THAN    reduce using rule 8 (factor -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 8 (factor -> ID .)
    $end            reduce using rule 8 (factor -> ID .)
    RPAREN          reduce using rule 8 (factor -> ID .)
    NEWLINE         reduce using rule 8 (factor -> ID .)
    RBRACE          reduce using rule 8 (factor -> ID .)


state 15

    (40) return_statement -> RETURN . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    expression                     shift and go to state 36
    term                           shift and go to state 7
    factor                         shift and go to state 16

state 16

    (6) term -> factor .

    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDE          reduce using rule 6 (term -> factor .)
    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    DOUBLE_EQUALS   reduce using rule 6 (term -> factor .)
    NOT_EQUALS      reduce using rule 6 (term -> factor .)
    LESS_THAN       reduce using rule 6 (term -> factor .)
    LESS_THAN_OR_EQUALS reduce using rule 6 (term -> factor .)
    GREATER_THAN    reduce using rule 6 (term -> factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    RPAREN          reduce using rule 6 (term -> factor .)
    NEWLINE         reduce using rule 6 (term -> factor .)
    RBRACE          reduce using rule 6 (term -> factor .)


state 17

    (27) type -> INT .

    ID              reduce using rule 27 (type -> INT .)


state 18

    (28) type -> FLOAT .

    ID              reduce using rule 28 (type -> FLOAT .)


state 19

    (29) type -> STR .

    ID              reduce using rule 29 (type -> STR .)


state 20

    (30) type -> BOOL .

    ID              reduce using rule 30 (type -> BOOL .)


state 21

    (7) factor -> NUM .

    TIMES           reduce using rule 7 (factor -> NUM .)
    DIVIDE          reduce using rule 7 (factor -> NUM .)
    PLUS            reduce using rule 7 (factor -> NUM .)
    MINUS           reduce using rule 7 (factor -> NUM .)
    DOUBLE_EQUALS   reduce using rule 7 (factor -> NUM .)
    NOT_EQUALS      reduce using rule 7 (factor -> NUM .)
    LESS_THAN       reduce using rule 7 (factor -> NUM .)
    LESS_THAN_OR_EQUALS reduce using rule 7 (factor -> NUM .)
    GREATER_THAN    reduce using rule 7 (factor -> NUM .)
    GREATER_THAN_OR_EQUALS reduce using rule 7 (factor -> NUM .)
    $end            reduce using rule 7 (factor -> NUM .)
    RPAREN          reduce using rule 7 (factor -> NUM .)
    NEWLINE         reduce using rule 7 (factor -> NUM .)
    RBRACE          reduce using rule 7 (factor -> NUM .)


state 22

    (1) expression -> expression PLUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    term                           shift and go to state 37
    factor                         shift and go to state 16

state 23

    (2) expression -> expression MINUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    term                           shift and go to state 38
    factor                         shift and go to state 16

state 24

    (19) condition -> expression comparison . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    expression                     shift and go to state 39
    term                           shift and go to state 7
    factor                         shift and go to state 16

state 25

    (13) comparison -> DOUBLE_EQUALS .

    STRING          reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    TRUE            reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    FALSE           reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    IF              reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    NUM             reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    ID              reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    LPAREN          reduce using rule 13 (comparison -> DOUBLE_EQUALS .)


state 26

    (14) comparison -> NOT_EQUALS .

    STRING          reduce using rule 14 (comparison -> NOT_EQUALS .)
    TRUE            reduce using rule 14 (comparison -> NOT_EQUALS .)
    FALSE           reduce using rule 14 (comparison -> NOT_EQUALS .)
    IF              reduce using rule 14 (comparison -> NOT_EQUALS .)
    NUM             reduce using rule 14 (comparison -> NOT_EQUALS .)
    ID              reduce using rule 14 (comparison -> NOT_EQUALS .)
    LPAREN          reduce using rule 14 (comparison -> NOT_EQUALS .)


state 27

    (15) comparison -> LESS_THAN .

    STRING          reduce using rule 15 (comparison -> LESS_THAN .)
    TRUE            reduce using rule 15 (comparison -> LESS_THAN .)
    FALSE           reduce using rule 15 (comparison -> LESS_THAN .)
    IF              reduce using rule 15 (comparison -> LESS_THAN .)
    NUM             reduce using rule 15 (comparison -> LESS_THAN .)
    ID              reduce using rule 15 (comparison -> LESS_THAN .)
    LPAREN          reduce using rule 15 (comparison -> LESS_THAN .)


state 28

    (16) comparison -> LESS_THAN_OR_EQUALS .

    STRING          reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    TRUE            reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    FALSE           reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    IF              reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    NUM             reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    ID              reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    LPAREN          reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)


state 29

    (17) comparison -> GREATER_THAN .

    STRING          reduce using rule 17 (comparison -> GREATER_THAN .)
    TRUE            reduce using rule 17 (comparison -> GREATER_THAN .)
    FALSE           reduce using rule 17 (comparison -> GREATER_THAN .)
    IF              reduce using rule 17 (comparison -> GREATER_THAN .)
    NUM             reduce using rule 17 (comparison -> GREATER_THAN .)
    ID              reduce using rule 17 (comparison -> GREATER_THAN .)
    LPAREN          reduce using rule 17 (comparison -> GREATER_THAN .)


state 30

    (18) comparison -> GREATER_THAN_OR_EQUALS .

    STRING          reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    TRUE            reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    FALSE           reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    IF              reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    NUM             reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    ID              reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    LPAREN          reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)


state 31

    (4) term -> term TIMES . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    factor                         shift and go to state 40

state 32

    (5) term -> term DIVIDE . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    factor                         shift and go to state 41

state 33

    (21) expression -> IF LPAREN . condition RPAREN LBRACE expression RBRACE
    (19) condition -> . expression comparison expression
    (20) condition -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    condition                      shift and go to state 42
    expression                     shift and go to state 43
    term                           shift and go to state 7
    factor                         shift and go to state 16

state 34

    (9) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 35

    (31) declaration -> type ID . expression_opt
    (35) function_declaration -> type ID . LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (32) expression_opt -> . EQUALS expression
    (33) expression_opt -> . empty
    (34) empty -> .

    LPAREN          shift and go to state 46
    EQUALS          shift and go to state 47
    $end            reduce using rule 34 (empty -> .)

    expression_opt                 shift and go to state 45
    empty                          shift and go to state 48

state 36

    (40) return_statement -> RETURN expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    $end            reduce using rule 40 (return_statement -> RETURN expression .)
    NEWLINE         reduce using rule 40 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 37

    (1) expression -> expression PLUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    DOUBLE_EQUALS   reduce using rule 1 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 1 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 1 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 1 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 1 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    NEWLINE         reduce using rule 1 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 38

    (2) expression -> expression MINUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    DOUBLE_EQUALS   reduce using rule 2 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 2 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 2 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 2 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 2 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    NEWLINE         reduce using rule 2 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32


state 39

    (19) condition -> expression comparison expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    $end            reduce using rule 19 (condition -> expression comparison expression .)
    RPAREN          reduce using rule 19 (condition -> expression comparison expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 40

    (4) term -> term TIMES factor .

    TIMES           reduce using rule 4 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 4 (term -> term TIMES factor .)
    PLUS            reduce using rule 4 (term -> term TIMES factor .)
    MINUS           reduce using rule 4 (term -> term TIMES factor .)
    DOUBLE_EQUALS   reduce using rule 4 (term -> term TIMES factor .)
    NOT_EQUALS      reduce using rule 4 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 4 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUALS reduce using rule 4 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 4 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 4 (term -> term TIMES factor .)
    $end            reduce using rule 4 (term -> term TIMES factor .)
    RPAREN          reduce using rule 4 (term -> term TIMES factor .)
    NEWLINE         reduce using rule 4 (term -> term TIMES factor .)
    RBRACE          reduce using rule 4 (term -> term TIMES factor .)


state 41

    (5) term -> term DIVIDE factor .

    TIMES           reduce using rule 5 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 5 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 5 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 5 (term -> term DIVIDE factor .)
    DOUBLE_EQUALS   reduce using rule 5 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 5 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 5 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 5 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 5 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 5 (term -> term DIVIDE factor .)
    $end            reduce using rule 5 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 5 (term -> term DIVIDE factor .)
    NEWLINE         reduce using rule 5 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 5 (term -> term DIVIDE factor .)


state 42

    (21) expression -> IF LPAREN condition . RPAREN LBRACE expression RBRACE

    RPAREN          shift and go to state 49


state 43

    (19) condition -> expression . comparison expression
    (20) condition -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (13) comparison -> . DOUBLE_EQUALS
    (14) comparison -> . NOT_EQUALS
    (15) comparison -> . LESS_THAN
    (16) comparison -> . LESS_THAN_OR_EQUALS
    (17) comparison -> . GREATER_THAN
    (18) comparison -> . GREATER_THAN_OR_EQUALS

    RPAREN          reduce using rule 20 (condition -> expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DOUBLE_EQUALS   shift and go to state 25
    NOT_EQUALS      shift and go to state 26
    LESS_THAN       shift and go to state 27
    LESS_THAN_OR_EQUALS shift and go to state 28
    GREATER_THAN    shift and go to state 29
    GREATER_THAN_OR_EQUALS shift and go to state 30

    comparison                     shift and go to state 24

state 44

    (9) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    DOUBLE_EQUALS   reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 9 (factor -> LPAREN expression RPAREN .)


state 45

    (31) declaration -> type ID expression_opt .

    $end            reduce using rule 31 (declaration -> type ID expression_opt .)
    NEWLINE         reduce using rule 31 (declaration -> type ID expression_opt .)


state 46

    (35) function_declaration -> type ID LPAREN . parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (36) parameter_list -> . parameter_list COMMA parameter
    (37) parameter_list -> . parameter
    (38) parameter_list -> . empty
    (39) parameter -> . type ID
    (34) empty -> .
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . STR
    (30) type -> . BOOL

    RPAREN          reduce using rule 34 (empty -> .)
    COMMA           reduce using rule 34 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STR             shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 50
    parameter_list                 shift and go to state 51
    parameter                      shift and go to state 52
    empty                          shift and go to state 53

state 47

    (32) expression_opt -> EQUALS . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    expression                     shift and go to state 54
    term                           shift and go to state 7
    factor                         shift and go to state 16

state 48

    (33) expression_opt -> empty .

    $end            reduce using rule 33 (expression_opt -> empty .)
    NEWLINE         reduce using rule 33 (expression_opt -> empty .)


state 49

    (21) expression -> IF LPAREN condition RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 55


state 50

    (39) parameter -> type . ID

    ID              shift and go to state 56


state 51

    (35) function_declaration -> type ID LPAREN parameter_list . RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (36) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 57
    COMMA           shift and go to state 58


state 52

    (37) parameter_list -> parameter .

    RPAREN          reduce using rule 37 (parameter_list -> parameter .)
    COMMA           reduce using rule 37 (parameter_list -> parameter .)


state 53

    (38) parameter_list -> empty .

    RPAREN          reduce using rule 38 (parameter_list -> empty .)
    COMMA           reduce using rule 38 (parameter_list -> empty .)


state 54

    (32) expression_opt -> EQUALS expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    $end            reduce using rule 32 (expression_opt -> EQUALS expression .)
    NEWLINE         reduce using rule 32 (expression_opt -> EQUALS expression .)
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 55

    (21) expression -> IF LPAREN condition RPAREN LBRACE . expression RBRACE
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 8
    TRUE            shift and go to state 9
    FALSE           shift and go to state 10
    IF              shift and go to state 11
    NUM             shift and go to state 21
    ID              shift and go to state 14
    LPAREN          shift and go to state 12

    expression                     shift and go to state 59
    term                           shift and go to state 7
    factor                         shift and go to state 16

state 56

    (39) parameter -> type ID .

    RPAREN          reduce using rule 39 (parameter -> type ID .)
    COMMA           reduce using rule 39 (parameter -> type ID .)


state 57

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN . LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE

    LBRACE          shift and go to state 60


state 58

    (36) parameter_list -> parameter_list COMMA . parameter
    (39) parameter -> . type ID
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . STR
    (30) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STR             shift and go to state 19
    BOOL            shift and go to state 20

    parameter                      shift and go to state 61
    type                           shift and go to state 50

state 59

    (21) expression -> IF LPAREN condition RPAREN LBRACE expression . RBRACE
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RBRACE          shift and go to state 62
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23


state 60

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE . declaration_list NEWLINE return_statement NEWLINE RBRACE
    (41) declaration_list -> . declaration_list NEWLINE declaration
    (42) declaration_list -> . declaration
    (43) declaration_list -> . empty
    (31) declaration -> . type ID expression_opt
    (34) empty -> .
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . STR
    (30) type -> . BOOL

    NEWLINE         reduce using rule 34 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STR             shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 63
    declaration_list               shift and go to state 64
    declaration                    shift and go to state 65
    empty                          shift and go to state 66

state 61

    (36) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 36 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 36 (parameter_list -> parameter_list COMMA parameter .)


state 62

    (21) expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .

    PLUS            reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    MINUS           reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    DOUBLE_EQUALS   reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    NOT_EQUALS      reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    LESS_THAN       reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    GREATER_THAN    reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    RPAREN          reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    NEWLINE         reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    RBRACE          reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)


state 63

    (31) declaration -> type . ID expression_opt

    ID              shift and go to state 67


state 64

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list . NEWLINE return_statement NEWLINE RBRACE
    (41) declaration_list -> declaration_list . NEWLINE declaration

    NEWLINE         shift and go to state 68


state 65

    (42) declaration_list -> declaration .

    NEWLINE         reduce using rule 42 (declaration_list -> declaration .)


state 66

    (43) declaration_list -> empty .

    NEWLINE         reduce using rule 43 (declaration_list -> empty .)


state 67

    (31) declaration -> type ID . expression_opt
    (32) expression_opt -> . EQUALS expression
    (33) expression_opt -> . empty
    (34) empty -> .

    EQUALS          shift and go to state 47
    NEWLINE         reduce using rule 34 (empty -> .)

    expression_opt                 shift and go to state 45
    empty                          shift and go to state 48

state 68

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE . return_statement NEWLINE RBRACE
    (41) declaration_list -> declaration_list NEWLINE . declaration
    (40) return_statement -> . RETURN expression
    (31) declaration -> . type ID expression_opt
    (27) type -> . INT
    (28) type -> . FLOAT
    (29) type -> . STR
    (30) type -> . BOOL

    RETURN          shift and go to state 15
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STR             shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 63
    return_statement               shift and go to state 69
    declaration                    shift and go to state 70

state 69

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement . NEWLINE RBRACE

    NEWLINE         shift and go to state 71


state 70

    (41) declaration_list -> declaration_list NEWLINE declaration .

    NEWLINE         reduce using rule 41 (declaration_list -> declaration_list NEWLINE declaration .)


state 71

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE . RBRACE

    RBRACE          shift and go to state 72


state 72

    (35) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE .

    $end            reduce using rule 35 (function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 2 resolved using rule (condition -> expression)
WARNING: rejected rule (start -> expression) in state 2
WARNING: Rule (start -> expression) is never reduced
