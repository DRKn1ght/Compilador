Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSE

Grammar

Rule 0     S' -> start
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     term -> term TIMES factor
Rule 5     term -> term DIVIDE factor
Rule 6     term -> factor
Rule 7     factor -> NUM
Rule 8     factor -> ID
Rule 9     factor -> LPAREN expression RPAREN
Rule 10    expression -> STRING
Rule 11    expression -> TRUE
Rule 12    expression -> FALSE
Rule 13    comparison -> DOUBLE_EQUALS
Rule 14    comparison -> NOT_EQUALS
Rule 15    comparison -> LESS_THAN
Rule 16    comparison -> LESS_THAN_OR_EQUALS
Rule 17    comparison -> GREATER_THAN
Rule 18    comparison -> GREATER_THAN_OR_EQUALS
Rule 19    condition -> expression comparison expression
Rule 20    condition -> expression
Rule 21    expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE
Rule 22    while_statement -> WHILE LPAREN condition RPAREN LBRACE expression RBRACE
Rule 23    start -> expression
Rule 24    start -> declaration
Rule 25    start -> function_declaration
Rule 26    start -> return_statement
Rule 27    start -> condition
Rule 28    start -> while_statement
Rule 29    type -> INT
Rule 30    type -> FLOAT
Rule 31    type -> STR
Rule 32    type -> BOOL
Rule 33    declaration -> type ID expression_opt
Rule 34    expression_opt -> EQUALS expression
Rule 35    expression_opt -> empty
Rule 36    empty -> <empty>
Rule 37    function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
Rule 38    parameter_list -> parameter_list COMMA parameter
Rule 39    parameter_list -> parameter
Rule 40    parameter_list -> empty
Rule 41    parameter -> type ID
Rule 42    return_statement -> RETURN expression
Rule 43    declaration_list -> declaration_list NEWLINE declaration
Rule 44    declaration_list -> declaration
Rule 45    declaration_list -> empty

Terminals, with rules where they appear

BOOL                 : 32
COMMA                : 38
DIVIDE               : 5
DOUBLE_EQUALS        : 13
ELSE                 : 
EQUALS               : 34
FALSE                : 12
FLOAT                : 30
GREATER_THAN         : 17
GREATER_THAN_OR_EQUALS : 18
ID                   : 8 33 37 41
IF                   : 21
INT                  : 29
LBRACE               : 21 22 37
LESS_THAN            : 15
LESS_THAN_OR_EQUALS  : 16
LPAREN               : 9 21 22 37
MINUS                : 2
NEWLINE              : 37 37 43
NOT_EQUALS           : 14
NUM                  : 7
PLUS                 : 1
RBRACE               : 21 22 37
RETURN               : 42
RPAREN               : 9 21 22 37
STR                  : 31
STRING               : 10
TIMES                : 4
TRUE                 : 11
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

comparison           : 19
condition            : 21 22 27
declaration          : 24 43 44
declaration_list     : 37 43
empty                : 35 40 45
expression           : 1 2 9 19 19 20 21 22 23 34 42
expression_opt       : 33
factor               : 4 5 6
function_declaration : 25
parameter            : 38 39
parameter_list       : 37 38
return_statement     : 26 37
start                : 0
term                 : 1 2 3 4 5
type                 : 33 37 41
while_statement      : 28

Parsing method: LALR

state 0

    (0) S' -> . start
    (23) start -> . expression
    (24) start -> . declaration
    (25) start -> . function_declaration
    (26) start -> . return_statement
    (27) start -> . condition
    (28) start -> . while_statement
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (33) declaration -> . type ID expression_opt
    (37) function_declaration -> . type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (42) return_statement -> . RETURN expression
    (19) condition -> . expression comparison expression
    (20) condition -> . expression
    (22) while_statement -> . WHILE LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (29) type -> . INT
    (30) type -> . FLOAT
    (31) type -> . STR
    (32) type -> . BOOL
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    RETURN          shift and go to state 16
    WHILE           shift and go to state 17
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    start                          shift and go to state 1
    expression                     shift and go to state 2
    declaration                    shift and go to state 3
    function_declaration           shift and go to state 4
    return_statement               shift and go to state 5
    condition                      shift and go to state 6
    while_statement                shift and go to state 7
    term                           shift and go to state 8
    type                           shift and go to state 14
    factor                         shift and go to state 18

state 1

    (0) S' -> start .



state 2

    (23) start -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (19) condition -> expression . comparison expression
    (20) condition -> expression .
    (13) comparison -> . DOUBLE_EQUALS
    (14) comparison -> . NOT_EQUALS
    (15) comparison -> . LESS_THAN
    (16) comparison -> . LESS_THAN_OR_EQUALS
    (17) comparison -> . GREATER_THAN
    (18) comparison -> . GREATER_THAN_OR_EQUALS

  ! reduce/reduce conflict for $end resolved using rule 20 (condition -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    $end            reduce using rule 20 (condition -> expression .)
    DOUBLE_EQUALS   shift and go to state 27
    NOT_EQUALS      shift and go to state 28
    LESS_THAN       shift and go to state 29
    LESS_THAN_OR_EQUALS shift and go to state 30
    GREATER_THAN    shift and go to state 31
    GREATER_THAN_OR_EQUALS shift and go to state 32

  ! $end            [ reduce using rule 23 (start -> expression .) ]

    comparison                     shift and go to state 26

state 3

    (24) start -> declaration .

    $end            reduce using rule 24 (start -> declaration .)


state 4

    (25) start -> function_declaration .

    $end            reduce using rule 25 (start -> function_declaration .)


state 5

    (26) start -> return_statement .

    $end            reduce using rule 26 (start -> return_statement .)


state 6

    (27) start -> condition .

    $end            reduce using rule 27 (start -> condition .)


state 7

    (28) start -> while_statement .

    $end            reduce using rule 28 (start -> while_statement .)


state 8

    (3) expression -> term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    DOUBLE_EQUALS   reduce using rule 3 (expression -> term .)
    NOT_EQUALS      reduce using rule 3 (expression -> term .)
    LESS_THAN       reduce using rule 3 (expression -> term .)
    LESS_THAN_OR_EQUALS reduce using rule 3 (expression -> term .)
    GREATER_THAN    reduce using rule 3 (expression -> term .)
    GREATER_THAN_OR_EQUALS reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    NEWLINE         reduce using rule 3 (expression -> term .)
    RBRACE          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 9

    (10) expression -> STRING .

    PLUS            reduce using rule 10 (expression -> STRING .)
    MINUS           reduce using rule 10 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 10 (expression -> STRING .)
    NOT_EQUALS      reduce using rule 10 (expression -> STRING .)
    LESS_THAN       reduce using rule 10 (expression -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 10 (expression -> STRING .)
    GREATER_THAN    reduce using rule 10 (expression -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 10 (expression -> STRING .)
    $end            reduce using rule 10 (expression -> STRING .)
    RPAREN          reduce using rule 10 (expression -> STRING .)
    NEWLINE         reduce using rule 10 (expression -> STRING .)
    RBRACE          reduce using rule 10 (expression -> STRING .)


state 10

    (11) expression -> TRUE .

    PLUS            reduce using rule 11 (expression -> TRUE .)
    MINUS           reduce using rule 11 (expression -> TRUE .)
    DOUBLE_EQUALS   reduce using rule 11 (expression -> TRUE .)
    NOT_EQUALS      reduce using rule 11 (expression -> TRUE .)
    LESS_THAN       reduce using rule 11 (expression -> TRUE .)
    LESS_THAN_OR_EQUALS reduce using rule 11 (expression -> TRUE .)
    GREATER_THAN    reduce using rule 11 (expression -> TRUE .)
    GREATER_THAN_OR_EQUALS reduce using rule 11 (expression -> TRUE .)
    $end            reduce using rule 11 (expression -> TRUE .)
    RPAREN          reduce using rule 11 (expression -> TRUE .)
    NEWLINE         reduce using rule 11 (expression -> TRUE .)
    RBRACE          reduce using rule 11 (expression -> TRUE .)


state 11

    (12) expression -> FALSE .

    PLUS            reduce using rule 12 (expression -> FALSE .)
    MINUS           reduce using rule 12 (expression -> FALSE .)
    DOUBLE_EQUALS   reduce using rule 12 (expression -> FALSE .)
    NOT_EQUALS      reduce using rule 12 (expression -> FALSE .)
    LESS_THAN       reduce using rule 12 (expression -> FALSE .)
    LESS_THAN_OR_EQUALS reduce using rule 12 (expression -> FALSE .)
    GREATER_THAN    reduce using rule 12 (expression -> FALSE .)
    GREATER_THAN_OR_EQUALS reduce using rule 12 (expression -> FALSE .)
    $end            reduce using rule 12 (expression -> FALSE .)
    RPAREN          reduce using rule 12 (expression -> FALSE .)
    NEWLINE         reduce using rule 12 (expression -> FALSE .)
    RBRACE          reduce using rule 12 (expression -> FALSE .)


state 12

    (21) expression -> IF . LPAREN condition RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 35


state 13

    (9) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    expression                     shift and go to state 36
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 14

    (33) declaration -> type . ID expression_opt
    (37) function_declaration -> type . ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE

    ID              shift and go to state 37


state 15

    (8) factor -> ID .

    TIMES           reduce using rule 8 (factor -> ID .)
    DIVIDE          reduce using rule 8 (factor -> ID .)
    PLUS            reduce using rule 8 (factor -> ID .)
    MINUS           reduce using rule 8 (factor -> ID .)
    DOUBLE_EQUALS   reduce using rule 8 (factor -> ID .)
    NOT_EQUALS      reduce using rule 8 (factor -> ID .)
    LESS_THAN       reduce using rule 8 (factor -> ID .)
    LESS_THAN_OR_EQUALS reduce using rule 8 (factor -> ID .)
    GREATER_THAN    reduce using rule 8 (factor -> ID .)
    GREATER_THAN_OR_EQUALS reduce using rule 8 (factor -> ID .)
    $end            reduce using rule 8 (factor -> ID .)
    RPAREN          reduce using rule 8 (factor -> ID .)
    NEWLINE         reduce using rule 8 (factor -> ID .)
    RBRACE          reduce using rule 8 (factor -> ID .)


state 16

    (42) return_statement -> RETURN . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    expression                     shift and go to state 38
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 17

    (22) while_statement -> WHILE . LPAREN condition RPAREN LBRACE expression RBRACE

    LPAREN          shift and go to state 39


state 18

    (6) term -> factor .

    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDE          reduce using rule 6 (term -> factor .)
    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    DOUBLE_EQUALS   reduce using rule 6 (term -> factor .)
    NOT_EQUALS      reduce using rule 6 (term -> factor .)
    LESS_THAN       reduce using rule 6 (term -> factor .)
    LESS_THAN_OR_EQUALS reduce using rule 6 (term -> factor .)
    GREATER_THAN    reduce using rule 6 (term -> factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    RPAREN          reduce using rule 6 (term -> factor .)
    NEWLINE         reduce using rule 6 (term -> factor .)
    RBRACE          reduce using rule 6 (term -> factor .)


state 19

    (29) type -> INT .

    ID              reduce using rule 29 (type -> INT .)


state 20

    (30) type -> FLOAT .

    ID              reduce using rule 30 (type -> FLOAT .)


state 21

    (31) type -> STR .

    ID              reduce using rule 31 (type -> STR .)


state 22

    (32) type -> BOOL .

    ID              reduce using rule 32 (type -> BOOL .)


state 23

    (7) factor -> NUM .

    TIMES           reduce using rule 7 (factor -> NUM .)
    DIVIDE          reduce using rule 7 (factor -> NUM .)
    PLUS            reduce using rule 7 (factor -> NUM .)
    MINUS           reduce using rule 7 (factor -> NUM .)
    DOUBLE_EQUALS   reduce using rule 7 (factor -> NUM .)
    NOT_EQUALS      reduce using rule 7 (factor -> NUM .)
    LESS_THAN       reduce using rule 7 (factor -> NUM .)
    LESS_THAN_OR_EQUALS reduce using rule 7 (factor -> NUM .)
    GREATER_THAN    reduce using rule 7 (factor -> NUM .)
    GREATER_THAN_OR_EQUALS reduce using rule 7 (factor -> NUM .)
    $end            reduce using rule 7 (factor -> NUM .)
    RPAREN          reduce using rule 7 (factor -> NUM .)
    NEWLINE         reduce using rule 7 (factor -> NUM .)
    RBRACE          reduce using rule 7 (factor -> NUM .)


state 24

    (1) expression -> expression PLUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    term                           shift and go to state 40
    factor                         shift and go to state 18

state 25

    (2) expression -> expression MINUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    term                           shift and go to state 41
    factor                         shift and go to state 18

state 26

    (19) condition -> expression comparison . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    expression                     shift and go to state 42
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 27

    (13) comparison -> DOUBLE_EQUALS .

    STRING          reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    TRUE            reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    FALSE           reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    IF              reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    NUM             reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    ID              reduce using rule 13 (comparison -> DOUBLE_EQUALS .)
    LPAREN          reduce using rule 13 (comparison -> DOUBLE_EQUALS .)


state 28

    (14) comparison -> NOT_EQUALS .

    STRING          reduce using rule 14 (comparison -> NOT_EQUALS .)
    TRUE            reduce using rule 14 (comparison -> NOT_EQUALS .)
    FALSE           reduce using rule 14 (comparison -> NOT_EQUALS .)
    IF              reduce using rule 14 (comparison -> NOT_EQUALS .)
    NUM             reduce using rule 14 (comparison -> NOT_EQUALS .)
    ID              reduce using rule 14 (comparison -> NOT_EQUALS .)
    LPAREN          reduce using rule 14 (comparison -> NOT_EQUALS .)


state 29

    (15) comparison -> LESS_THAN .

    STRING          reduce using rule 15 (comparison -> LESS_THAN .)
    TRUE            reduce using rule 15 (comparison -> LESS_THAN .)
    FALSE           reduce using rule 15 (comparison -> LESS_THAN .)
    IF              reduce using rule 15 (comparison -> LESS_THAN .)
    NUM             reduce using rule 15 (comparison -> LESS_THAN .)
    ID              reduce using rule 15 (comparison -> LESS_THAN .)
    LPAREN          reduce using rule 15 (comparison -> LESS_THAN .)


state 30

    (16) comparison -> LESS_THAN_OR_EQUALS .

    STRING          reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    TRUE            reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    FALSE           reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    IF              reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    NUM             reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    ID              reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)
    LPAREN          reduce using rule 16 (comparison -> LESS_THAN_OR_EQUALS .)


state 31

    (17) comparison -> GREATER_THAN .

    STRING          reduce using rule 17 (comparison -> GREATER_THAN .)
    TRUE            reduce using rule 17 (comparison -> GREATER_THAN .)
    FALSE           reduce using rule 17 (comparison -> GREATER_THAN .)
    IF              reduce using rule 17 (comparison -> GREATER_THAN .)
    NUM             reduce using rule 17 (comparison -> GREATER_THAN .)
    ID              reduce using rule 17 (comparison -> GREATER_THAN .)
    LPAREN          reduce using rule 17 (comparison -> GREATER_THAN .)


state 32

    (18) comparison -> GREATER_THAN_OR_EQUALS .

    STRING          reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    TRUE            reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    FALSE           reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    IF              reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    NUM             reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    ID              reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)
    LPAREN          reduce using rule 18 (comparison -> GREATER_THAN_OR_EQUALS .)


state 33

    (4) term -> term TIMES . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    factor                         shift and go to state 43

state 34

    (5) term -> term DIVIDE . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    factor                         shift and go to state 44

state 35

    (21) expression -> IF LPAREN . condition RPAREN LBRACE expression RBRACE
    (19) condition -> . expression comparison expression
    (20) condition -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    condition                      shift and go to state 45
    expression                     shift and go to state 46
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 36

    (9) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 47
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 37

    (33) declaration -> type ID . expression_opt
    (37) function_declaration -> type ID . LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (34) expression_opt -> . EQUALS expression
    (35) expression_opt -> . empty
    (36) empty -> .

    LPAREN          shift and go to state 49
    EQUALS          shift and go to state 50
    $end            reduce using rule 36 (empty -> .)

    expression_opt                 shift and go to state 48
    empty                          shift and go to state 51

state 38

    (42) return_statement -> RETURN expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    $end            reduce using rule 42 (return_statement -> RETURN expression .)
    NEWLINE         reduce using rule 42 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 39

    (22) while_statement -> WHILE LPAREN . condition RPAREN LBRACE expression RBRACE
    (19) condition -> . expression comparison expression
    (20) condition -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    condition                      shift and go to state 52
    expression                     shift and go to state 46
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 40

    (1) expression -> expression PLUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    DOUBLE_EQUALS   reduce using rule 1 (expression -> expression PLUS term .)
    NOT_EQUALS      reduce using rule 1 (expression -> expression PLUS term .)
    LESS_THAN       reduce using rule 1 (expression -> expression PLUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 1 (expression -> expression PLUS term .)
    GREATER_THAN    reduce using rule 1 (expression -> expression PLUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    NEWLINE         reduce using rule 1 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 41

    (2) expression -> expression MINUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    DOUBLE_EQUALS   reduce using rule 2 (expression -> expression MINUS term .)
    NOT_EQUALS      reduce using rule 2 (expression -> expression MINUS term .)
    LESS_THAN       reduce using rule 2 (expression -> expression MINUS term .)
    LESS_THAN_OR_EQUALS reduce using rule 2 (expression -> expression MINUS term .)
    GREATER_THAN    reduce using rule 2 (expression -> expression MINUS term .)
    GREATER_THAN_OR_EQUALS reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    NEWLINE         reduce using rule 2 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34


state 42

    (19) condition -> expression comparison expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    $end            reduce using rule 19 (condition -> expression comparison expression .)
    RPAREN          reduce using rule 19 (condition -> expression comparison expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 43

    (4) term -> term TIMES factor .

    TIMES           reduce using rule 4 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 4 (term -> term TIMES factor .)
    PLUS            reduce using rule 4 (term -> term TIMES factor .)
    MINUS           reduce using rule 4 (term -> term TIMES factor .)
    DOUBLE_EQUALS   reduce using rule 4 (term -> term TIMES factor .)
    NOT_EQUALS      reduce using rule 4 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 4 (term -> term TIMES factor .)
    LESS_THAN_OR_EQUALS reduce using rule 4 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 4 (term -> term TIMES factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 4 (term -> term TIMES factor .)
    $end            reduce using rule 4 (term -> term TIMES factor .)
    RPAREN          reduce using rule 4 (term -> term TIMES factor .)
    NEWLINE         reduce using rule 4 (term -> term TIMES factor .)
    RBRACE          reduce using rule 4 (term -> term TIMES factor .)


state 44

    (5) term -> term DIVIDE factor .

    TIMES           reduce using rule 5 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 5 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 5 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 5 (term -> term DIVIDE factor .)
    DOUBLE_EQUALS   reduce using rule 5 (term -> term DIVIDE factor .)
    NOT_EQUALS      reduce using rule 5 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 5 (term -> term DIVIDE factor .)
    LESS_THAN_OR_EQUALS reduce using rule 5 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 5 (term -> term DIVIDE factor .)
    GREATER_THAN_OR_EQUALS reduce using rule 5 (term -> term DIVIDE factor .)
    $end            reduce using rule 5 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 5 (term -> term DIVIDE factor .)
    NEWLINE         reduce using rule 5 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 5 (term -> term DIVIDE factor .)


state 45

    (21) expression -> IF LPAREN condition . RPAREN LBRACE expression RBRACE

    RPAREN          shift and go to state 53


state 46

    (19) condition -> expression . comparison expression
    (20) condition -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (13) comparison -> . DOUBLE_EQUALS
    (14) comparison -> . NOT_EQUALS
    (15) comparison -> . LESS_THAN
    (16) comparison -> . LESS_THAN_OR_EQUALS
    (17) comparison -> . GREATER_THAN
    (18) comparison -> . GREATER_THAN_OR_EQUALS

    RPAREN          reduce using rule 20 (condition -> expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    DOUBLE_EQUALS   shift and go to state 27
    NOT_EQUALS      shift and go to state 28
    LESS_THAN       shift and go to state 29
    LESS_THAN_OR_EQUALS shift and go to state 30
    GREATER_THAN    shift and go to state 31
    GREATER_THAN_OR_EQUALS shift and go to state 32

    comparison                     shift and go to state 26

state 47

    (9) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    DOUBLE_EQUALS   reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    LESS_THAN_OR_EQUALS reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN_OR_EQUALS reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 9 (factor -> LPAREN expression RPAREN .)


state 48

    (33) declaration -> type ID expression_opt .

    $end            reduce using rule 33 (declaration -> type ID expression_opt .)
    NEWLINE         reduce using rule 33 (declaration -> type ID expression_opt .)


state 49

    (37) function_declaration -> type ID LPAREN . parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (38) parameter_list -> . parameter_list COMMA parameter
    (39) parameter_list -> . parameter
    (40) parameter_list -> . empty
    (41) parameter -> . type ID
    (36) empty -> .
    (29) type -> . INT
    (30) type -> . FLOAT
    (31) type -> . STR
    (32) type -> . BOOL

    RPAREN          reduce using rule 36 (empty -> .)
    COMMA           reduce using rule 36 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 54
    parameter_list                 shift and go to state 55
    parameter                      shift and go to state 56
    empty                          shift and go to state 57

state 50

    (34) expression_opt -> EQUALS . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    expression                     shift and go to state 58
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 51

    (35) expression_opt -> empty .

    $end            reduce using rule 35 (expression_opt -> empty .)
    NEWLINE         reduce using rule 35 (expression_opt -> empty .)


state 52

    (22) while_statement -> WHILE LPAREN condition . RPAREN LBRACE expression RBRACE

    RPAREN          shift and go to state 59


state 53

    (21) expression -> IF LPAREN condition RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 60


state 54

    (41) parameter -> type . ID

    ID              shift and go to state 61


state 55

    (37) function_declaration -> type ID LPAREN parameter_list . RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE
    (38) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 62
    COMMA           shift and go to state 63


state 56

    (39) parameter_list -> parameter .

    RPAREN          reduce using rule 39 (parameter_list -> parameter .)
    COMMA           reduce using rule 39 (parameter_list -> parameter .)


state 57

    (40) parameter_list -> empty .

    RPAREN          reduce using rule 40 (parameter_list -> empty .)
    COMMA           reduce using rule 40 (parameter_list -> empty .)


state 58

    (34) expression_opt -> EQUALS expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    $end            reduce using rule 34 (expression_opt -> EQUALS expression .)
    NEWLINE         reduce using rule 34 (expression_opt -> EQUALS expression .)
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 59

    (22) while_statement -> WHILE LPAREN condition RPAREN . LBRACE expression RBRACE

    LBRACE          shift and go to state 64


state 60

    (21) expression -> IF LPAREN condition RPAREN LBRACE . expression RBRACE
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    expression                     shift and go to state 65
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 61

    (41) parameter -> type ID .

    RPAREN          reduce using rule 41 (parameter -> type ID .)
    COMMA           reduce using rule 41 (parameter -> type ID .)


state 62

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN . LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE

    LBRACE          shift and go to state 66


state 63

    (38) parameter_list -> parameter_list COMMA . parameter
    (41) parameter -> . type ID
    (29) type -> . INT
    (30) type -> . FLOAT
    (31) type -> . STR
    (32) type -> . BOOL

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    parameter                      shift and go to state 67
    type                           shift and go to state 54

state 64

    (22) while_statement -> WHILE LPAREN condition RPAREN LBRACE . expression RBRACE
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (10) expression -> . STRING
    (11) expression -> . TRUE
    (12) expression -> . FALSE
    (21) expression -> . IF LPAREN condition RPAREN LBRACE expression RBRACE
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUM
    (8) factor -> . ID
    (9) factor -> . LPAREN expression RPAREN

    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    NUM             shift and go to state 23
    ID              shift and go to state 15
    LPAREN          shift and go to state 13

    expression                     shift and go to state 68
    term                           shift and go to state 8
    factor                         shift and go to state 18

state 65

    (21) expression -> IF LPAREN condition RPAREN LBRACE expression . RBRACE
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RBRACE          shift and go to state 69
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 66

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE . declaration_list NEWLINE return_statement NEWLINE RBRACE
    (43) declaration_list -> . declaration_list NEWLINE declaration
    (44) declaration_list -> . declaration
    (45) declaration_list -> . empty
    (33) declaration -> . type ID expression_opt
    (36) empty -> .
    (29) type -> . INT
    (30) type -> . FLOAT
    (31) type -> . STR
    (32) type -> . BOOL

    NEWLINE         reduce using rule 36 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 70
    declaration_list               shift and go to state 71
    declaration                    shift and go to state 72
    empty                          shift and go to state 73

state 67

    (38) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 38 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 38 (parameter_list -> parameter_list COMMA parameter .)


state 68

    (22) while_statement -> WHILE LPAREN condition RPAREN LBRACE expression . RBRACE
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RBRACE          shift and go to state 74
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25


state 69

    (21) expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .

    PLUS            reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    MINUS           reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    DOUBLE_EQUALS   reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    NOT_EQUALS      reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    LESS_THAN       reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    LESS_THAN_OR_EQUALS reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    GREATER_THAN    reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    GREATER_THAN_OR_EQUALS reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    RPAREN          reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    NEWLINE         reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)
    RBRACE          reduce using rule 21 (expression -> IF LPAREN condition RPAREN LBRACE expression RBRACE .)


state 70

    (33) declaration -> type . ID expression_opt

    ID              shift and go to state 75


state 71

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list . NEWLINE return_statement NEWLINE RBRACE
    (43) declaration_list -> declaration_list . NEWLINE declaration

    NEWLINE         shift and go to state 76


state 72

    (44) declaration_list -> declaration .

    NEWLINE         reduce using rule 44 (declaration_list -> declaration .)


state 73

    (45) declaration_list -> empty .

    NEWLINE         reduce using rule 45 (declaration_list -> empty .)


state 74

    (22) while_statement -> WHILE LPAREN condition RPAREN LBRACE expression RBRACE .

    $end            reduce using rule 22 (while_statement -> WHILE LPAREN condition RPAREN LBRACE expression RBRACE .)


state 75

    (33) declaration -> type ID . expression_opt
    (34) expression_opt -> . EQUALS expression
    (35) expression_opt -> . empty
    (36) empty -> .

    EQUALS          shift and go to state 50
    NEWLINE         reduce using rule 36 (empty -> .)

    expression_opt                 shift and go to state 48
    empty                          shift and go to state 51

state 76

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE . return_statement NEWLINE RBRACE
    (43) declaration_list -> declaration_list NEWLINE . declaration
    (42) return_statement -> . RETURN expression
    (33) declaration -> . type ID expression_opt
    (29) type -> . INT
    (30) type -> . FLOAT
    (31) type -> . STR
    (32) type -> . BOOL

    RETURN          shift and go to state 16
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 70
    return_statement               shift and go to state 77
    declaration                    shift and go to state 78

state 77

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement . NEWLINE RBRACE

    NEWLINE         shift and go to state 79


state 78

    (43) declaration_list -> declaration_list NEWLINE declaration .

    NEWLINE         reduce using rule 43 (declaration_list -> declaration_list NEWLINE declaration .)


state 79

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE . RBRACE

    RBRACE          shift and go to state 80


state 80

    (37) function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE .

    $end            reduce using rule 37 (function_declaration -> type ID LPAREN parameter_list RPAREN LBRACE declaration_list NEWLINE return_statement NEWLINE RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 2 resolved using rule (condition -> expression)
WARNING: rejected rule (start -> expression) in state 2
WARNING: Rule (start -> expression) is never reduced
